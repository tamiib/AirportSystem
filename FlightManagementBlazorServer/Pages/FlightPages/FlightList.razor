@page "/flightList"
@inject FlightService _flightService;
@inject NavigationManager _navigationManager;


<h3>Flights</h3>
@if (CurrentUser.Role == "Admin")
{
    <button type="button" class="btn btn-success" @onclick="OpenAddFlightPage">
        <span class="oi oi-plus"></span>
        Add Flight
    </button>
    <button  type="button" class="btn btn-danger" @onclick="OpenAddUserPage">
        <span class="oi oi-pencil">Add User</span>
    </button>
}

@if (Flights == null)
{
    <div>Loading...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Number</th>
                <th>Date</th>
                <th>Time</th>
                <th>Carrier</th>
                <th>Airport to</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var flight in Flights)
            {
                <tr>
                    <td>@flight.Number</td>
                    <td>@flight.FlightDate.ToString("dd.MM.yyyy")</td>
                    <td>@flight.FlightTime</td>
                    <td>@flight.Carrier?.Name</td>
                    <td>@flight.AirportTo</td>
                    <td>
                        @if (CurrentUser.Role == "Admin")
                        {
                            <a href="/EditFlight/@flight.Id" class="btn btn-primary">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button type="button" class="btn btn-danger" @onclick="() => DeleteFlight(flight.Id)">
                                <span class="oi oi-delete"></span>
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="() => ArchiveFlight(flight.Id)">
                                <span class="oi oi-transfer"></span>
                            </button>
                        }
                        <a href="/PassengerList/@flight.Id" class="btn btn-success">
                            <span class="oi oi-pencil"> Passengers</span>
                        </a>
                    </td>
                </tr>
            }

        </tbody>
    </table>

}

<ConfirmationDialog @ref="DeleteConfirmationDialog" ConfirmationChanged="@OnDeleteConfirmationSelected" Question="Delete flight?"></ConfirmationDialog>
<ConfirmationDialog @ref="ArchiveConfirmationDialog" ConfirmationChanged="@OnArchiveConfirmationSelected" Question="Archive flight?"></ConfirmationDialog>

@code {
    private List<Flight> Flights;
    public ConfirmationDialog DeleteConfirmationDialog { get; set; }
    public ConfirmationDialog ArchiveConfirmationDialog { get; set; }
    public int SelectedFlightId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Flights = await _flightService.GetFlights();
    }

    private void OpenAddFlightPage()
    {
        _navigationManager.NavigateTo("/AddFlight");
    }

    private void OpenAddUserPage()
    {
        _navigationManager.NavigateTo("/AddUser");
    }

    private async Task DeleteFlight(int flightId)
    {
        SelectedFlightId = flightId;
        DeleteConfirmationDialog.Show();
    }

    private async Task OnDeleteConfirmationSelected(bool isDeleteConfirmed)
    {
        if (isDeleteConfirmed)
        {
            await _flightService.DeleteFlight(SelectedFlightId);
            Flights = await _flightService.GetFlights();
        }
    }

    private async Task OnArchiveConfirmationSelected(bool isArchiveConfirmed)
    {
        if (isArchiveConfirmed)
        {
            await _flightService.ArchiveFlight(SelectedFlightId);
            Flights = await _flightService.GetFlights();
        }
    }

    private async Task ArchiveFlight(int flightId)
    {
        SelectedFlightId = flightId;
        ArchiveConfirmationDialog.Show();
    }
}
